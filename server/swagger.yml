swagger: "2.0"
info:
  description: This is the swagger file that goes with the server code
  version: "1.0.0"
  title: Swagger REST Article
consumes:
  - "application/json"
produces:
  - "application/json"

basePath: "/api"


# Paths supported by the server application
paths:

# -------------------------- User --------------------------------

  /user:
    post:
      operationId: entities.user.create
      tags:
        - User
      summary: Create a user
      description: Create a new user
      parameters:
        - name: user
          in: body
          description: User to create
          required: True
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: Successfully created user
          schema:
            $ref: '#/definitions/User'

    get:
      operationId: entities.user.get_all_users
      tags:
        - User
      summary: Get all users
      description: Get all users
      responses:
        201:
          description: Successfully got user list
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

  /user/{id}:
    get:
      operationId: "entities.user.read_one_user_by_id"
      tags:
        - User
      summary: "Read one user corresponding to the given id"
      description: "Read one user corresponding to the given id"
      parameters:
        - name: id
          in: path
          description: Id of the user to get
          type: integer
          required: True
      responses:
        200:
          description: "Successful read user list operation"
          schema:
            $ref: '#/definitions/User'

    put:
      operationId: entities.user.update
      tags:
        - User
      summary: Update a user
      description: Update a user
      parameters:
        - name: id
          in: path
          description: Id the user to update
          type: integer
          required: True
        - name: user
          in: body
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Successfully updated user
          schema:
            $ref: '#/definitions/User'

    delete:
      operationId: entities.user.delete
      tags:
        - User
      summary: Delete a user from the user list
      description: Delete a user
      parameters:
        - name: id
          in: path
          type: integer
          description: Id of the user to delete
          required: true
      responses:
        200:
          description: Successfully deleted a user

          
  /user/{id}/send_mail:
    get:
      operationId: entities.user.send_mail
      tags:
        - User
      summary: Send a mail to a User
      description: Send a mail to a User
      parameters:
        - name: id
          in: path
          type: integer
          description: Id of the user to send the mail to
          required: true
        - name: content
          in: body
          description: Content of the mail
          schema:
            type: string
      responses:
        200:
          description: Mail sent successfully


  /user/{id}/groupe:
    get:
      operationId: entities.groupe.get_user_groupes
      tags:
        - User
      summary: Get user's groups
      description: Get user's groups
      parameters:
        - name: id
          in: path
          type: integer
          description: Id of the user to get the groups from
          required: true
      responses:
        200:
          description: Successful read user list groups operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Groupe'   


  /user/current/a_venir:
    get:
      operationId: entities.user.get_incoming_activities
      tags:
        - User
      summary: get incoming activities
      description: get incoming activities
      responses:
        200:
          description: Successful read user list incoming activities operation
          schema:
            $ref: '#/definitions/Sortie'
        401:
          description: No User currently logged

  /user/current/finies:
    get:
      operationId: entities.user.get_previous_activities
      tags:
        - User
      summary: get previous activities
      description: get previous activities
      responses:
        200:
          description: Successful read user list previous activities operation
          schema:
            $ref: '#/definitions/Sortie'
        401:
          description: No User currently logged

  /user/current/{id_sortie}/switch:
    put:
      operationId: entities.user.switch_to_previous
      tags:
        - User
      summary: Switch sortie from incoming to previous
      description: Switch sortie from incoming to previous
      parameters:
        - name: id_sortie
          in: path
          type: integer
          description: Id of the sortie to switch
          required: true
      responses:
        200:
          description: Successfully updated user
          schema:
            $ref: '#/definitions/User'
        401:
          description: No User currently logged


  /user/current/change_pwd:
    put:
      operationId: entities.user.change_password
      tags:
        - User
      summary: Changes current user password
      description: Changes current user password
      parameters:
        - name: new_pwd
          in: query
          type: string
          description: New password
          required: true
      responses:
        200:
          description: Successfully changed password
          schema:
            $ref: '#/definitions/User'
        401:
          description: No User currently logged


  /user/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      description: Logs user into the system
      operationId: entities.user.login
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: email
        in: query
        description: The email of the user loging in
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid username/password supplied

  /user/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      description: Logs out current logged in user session
      operationId: entities.user.logout
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: successful operation

  /user/current:
    get:
      operationId: entities.user.get_current
      tags:
        - User
      summary: Get the current user
      description: Get the user currently logged
      responses:
        200:
          description: Current user successfully retreived
          schema:
            $ref: '#/definitions/User'


  /sortie/{id_sortie}/register:
    post:
      operationId: entities.user.register
      tags:
        - User
      summary: Register a user to a sortie
      description: Register a user to a sortie
      parameters:
        - name: id_sortie
          in: path
          type: integer
          description: Id of the sortie to register to
          required: true
      responses:
        201:
          description: Successfully registred user

    delete:
      operationId: entities.user.cancel_registration
      tags:
        - User
      summary: Cancel registration a user to a sortie
      description: Cancel registration a user to a sortie
      parameters:
        - name: id_sortie
          in: path
          type: integer
          description: Id of the sortie to register to
          required: true
      responses:
        201:
          description: Successfully cancel registration user


# --------------------- Sortie -----------------------------


  /sortie:
    get:
      operationId: "entities.sortie.read_all_sorties"
      tags:
        - Sortie
      summary: Get all the sortie
      description: "Read the list of sortie"
      responses:
        200:
          description: "Successful read sortie list operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/Sortie'

    post:
      operationId: entities.sortie.create
      tags:
        - Sortie
      summary: Create a sortie
      description: Create a new sortie
      parameters:
        - name: sortie
          in: body
          description: Sortie to create
          required: True
          schema:
            $ref: '#/definitions/Sortie'
      responses:
        201:
          description: Successfully created sortie
          schema:
            $ref: '#/definitions/Sortie'

  /sortie/{id_sortie}:
    get:
      operationId: entities.sortie.read_one_sortie_by_id
      tags:
        - Sortie
      summary: Get one sortie by id
      description: Read one sortie corresponding to the given id
      parameters:
        - name: id_sortie
          in: path
          description: Id of the sortie to get
          type: integer
          required: True
      responses:
        200:
          description: Successful read sortie list operation
          schema:
            $ref: '#/definitions/Sortie'

    put:
      operationId: entities.sortie.update
      tags:
        - Sortie
      summary: Update a sortie
      description: Update a sortie
      parameters:
        - name: id_sortie
          in: path
          description: Id the sortie to update
          type: integer
          required: True
        - name: sortie
          in: body
          schema:
            $ref: '#/definitions/Sortie'
      responses:
        200:
          description: Successfully updated sortie
          schema:
            $ref: '#/definitions/Sortie'

    delete:
      operationId: entities.sortie.delete
      tags:
        - Sortie
      summary: Delete a sortie from the sortie list
      description: Delete a sortie
      parameters:
        - name: id_sortie
          in: path
          type: integer
          description: Id of the sortie to delete
          required: true
      responses:
        200:
          description: Successfully deleted a sortie


  /search/{search}:
    get:
      operationId: "entities.sortie.get_sorties_by_search"
      tags:
        - Sortie
      summary: Get one sortie by name
      description: Read one sortie corresponding to the given name
      parameters:
        - name: search
          in: path
          description: name of the sorties to get
          type: string
          required: true
      responses:
        200:
          description: "Successful search sortie list operation"
          schema:
            $ref: '#/definitions/Sortie'

  /filter/{type_sortie}:
    get:
      operationId: "entities.sortie.get_sorties_by_type"
      tags:
        - Sortie
      summary: "The sortie data structure supported by the server application"
      description: "Filter sorties corresponding to the given type of sortie"
      parameters:
        - name: type_sortie
          in: path
          description: type of the sorties to get
          type: string
          required: true
      responses:
        200:
          description: "Successful filter sortie list operation"
          schema:
            $ref: '#/definitions/Sortie'


# --------------------- Commentaire -----------------------------

  /com:
    get:
      operationId: entities.commentaire.get_all
      tags:
        - Commentaire
      summary: Get all commentaires
      description: Get all commentaires
      responses:
        201:
          description: Successfully got commentaires list
          schema:
            type: array
            items:
              $ref: '#/definitions/Commentaire'


  /sortie/{id_sortie}/com:
    get:
      operationId: entities.commentaire.get_activity_comments
      tags:
        - Commentaire
      summary: Get list of comments of an activity
      description: Get list of comments of an activity
      parameters:
        - name: id_sortie
          in: path
          description: Id of the sortie to get
          type: integer
          required: True
      responses:
        200:
          description: Successful read commenaires list operation
          schema:
            $ref: '#/definitions/Commentaire'
    
    post:
      operationId: entities.commentaire.comment
      tags:
        - Commentaire
      summary: Comment an acitivity
      description: Comment an acitivity
      parameters:
        - name: id_sortie
          in: path
          description: Id of the sortie to get
          type: integer
          required: True
        - name: com
          in: query
          type: string
      responses:
        201:
          description: Successfully created sortie
          schema:
            $ref: '#/definitions/Commentaire'


  /sortie/{id_sortie}/com/{id_com}:
    get:
      operationId: entities.commentaire.get_activity_single_comment
      tags:
        - Commentaire
      summary: Get one comment of one activity by id
      description: Get one comment of one activity by id
      parameters:
        - name: id_sortie
          in: path
          description: Id of the sortie to get
          type: integer
          required: True
        - name: id_com
          in: path
          description: Id of the comment to get
          type: integer
          required: True
      responses:
        200:
          description: Successful read commentaire from sortie operation
          schema:
            $ref: '#/definitions/Commentaire'

    put:
      operationId: entities.commentaire.update
      tags:
        - Commentaire
      summary: Update a comment
      description: Update a comment
      parameters:
        - name: id_sortie
          in: path
          description: Id of the sortie to get
          type: integer
          required: True
        - name: id_com
          in: path
          description: Id of the com to update
          type: integer
          required: True
        - name: com
          in: query
          type: string
      responses:
        201:
          description: Successfully updated commentaire
          schema:
            $ref: '#/definitions/Commentaire'

    delete:
      operationId: entities.commentaire.delete
      tags:
        - Commentaire
      summary: Delete a comment from the sortie
      description: Delete a comment
      parameters:
        - name: id_sortie
          in: path
          type: integer
          description: Id of the sortie
          required: true
        - name: id_com
          in: path
          type: integer
          description: Id of the comment to delete
          required: true
      responses:
        200:
          description: Successfully deleted a comment


# --------------------- Groupe -----------------------------

  /groupe:
    get:
      operationId: entities.groupe.get_all
      tags:
        - Groupe
      summary: Get all groupes
      description: Get all groupes
      responses:
        201:
          description: Successfully got groupess list
          schema:
            type: array
            items:
              $ref: '#/definitions/Groupe'

    post:
      operationId: entities.groupe.create
      tags:
        - Groupe
      summary: Create a group
      description: Create a new group
      parameters:
        - name: groupe
          in: body
          description: Groupe to create
          required: True
          schema:
            $ref: '#/definitions/Groupe'
      responses:
        201:
          description: Successfully created groupe
          schema:
            $ref: '#/definitions/Groupe'


  /groupe/{id_groupe}:
    get:
      operationId: entities.groupe.get_one
      tags:
        - Groupe
      summary: Get one groupe by id
      description: Read one groupe corresponding to the given id
      parameters:
        - name: id_groupe
          in: path
          description: Id of the groupe to get
          type: integer
          required: True
      responses:
        200:
          description: Successful read groupe list operation
          schema:
            $ref: '#/definitions/Groupe'

    put:
      operationId: entities.groupe.update
      tags:
        - Groupe
      summary: Update a groupe
      description: Update a groupe
      parameters:
        - name: id_groupe
          in: path
          description: Id the groupe to update
          type: integer
          required: True
        - name: groupe
          in: body
          schema:
            $ref: '#/definitions/Groupe'
      responses:
        200:
          description: Successfully updated groupe
          schema:
            $ref: '#/definitions/Groupe'

    delete:
      operationId: entities.groupe.delete
      tags:
        - Groupe
      summary: Delete a groupe from the groupe list
      description: Delete a groupe
      parameters:
        - name: id_groupe
          in: path
          type: integer
          description: Id of the groupe to delete
          required: true
      responses:
        200:
          description: Successfully deleted a 
  
  /groupe/{id_groupe}/membres:

    post:
      operationId: entities.demande.accept
      tags:
        - User
      summary: Accept an invitation to join a groupe
      description: Accept an invitation to join a groupe
      parameters:
        - name: id_groupe
          in: path
          type: integer
          description: Id of the groupe
          required: true
      responses:
        201:
          description: Successfully accept invitation to join a groupe

    delete:
      operationId: entities.user.quit_groupe
      tags:
        - User
      summary: Quit a groupe
      description: Quit a groupe
      parameters:
        - name: id_groupe
          in: path
          type: integer
          description: Id of the groupe to quit
          required: true
      responses:
        201:
          description: Successfully quit groupe
    

  /groupe/{id_groupe}/membre/{id}:
    delete:
      operationId: entities.user.remove_from_groupe
      tags:
        - Groupe
      summary: Remove someone from a groupe
      description: Remove someone from a groupe
      parameters:
        - name: id_groupe
          in: path
          type: integer
          description: Id of the groupe
          required: true
        - name: id
          in: path
          type: integer
          description: Id of the user
          required: true
      responses:
        200:
          description: Successfully remove user from groupe


  /search_groupe/{search}:
    get:
      operationId: "entities.groupe.get_groupes_by_search"
      tags:
        - Groupe
      summary: Get one groupe by name
      description: Read one groupe corresponding to the given name
      parameters:
        - name: search
          in: path
          description: name of the groupes to get
          type: string
          required: true
      responses:
        200:
          description: "Successful search groupe list operation"
          schema:
            $ref: '#/definitions/Groupe'


# --------------------- Demandes d'ajout -----------------------------

  /demandes:
    get:
      operationId: entities.demande.get_all
      tags:
        - Demande
      summary: Get all demandes
      description: Get all demandes
      responses:
        201:
          description: Successfully got demandes list
          schema:
            type: array
            items:
              $ref: '#/definitions/Demande'


  /groupe/{id_groupe}/demandes:
    get:
      operationId: entities.demande.get_groupe_demandes
      tags:
        - Demande
      summary: Get list of demandes of a groupe
      description: Get list of demandes of a groupe
      parameters:
        - name: id_groupe
          in: path
          description: Id of the groupe to get
          type: integer
          required: True
      responses:
        200:
          description: Successful read demandes list operation
          schema:
            $ref: '#/definitions/Demande'
      
    post:
      operationId: entities.demande.add_to_groupe
      tags:
        - Demande
      summary: Add someone to a group
      description: Add someone to a group
      parameters:
        - name: id_groupe
          in: path
          description: Id of the groupe to get
          type: integer
          required: True
        - name: id
          in: query
          type: integer
          required: True
      responses:
        201:
          description: Successfully sended invitation to join group
          schema:
            $ref: '#/definitions/Demande'

    delete:
      operationId: entities.demande.refuse
      tags:
        - Demande
      summary: Refuse an invitation to join a groupe
      description: Refuse an invitation to join a groupe
      parameters:
        - name: id_groupe
          in: path
          type: integer
          description: Id of the groupe
          required: true
      responses:
        200:
          description: Successfully refuse invitation to join a groupe

  /groupe/{id_groupe}/demandes/{id_demande}:
    get:
      operationId: entities.demande.get_groupe_single_demande
      tags:
        - Demande
      summary: Get one demande of one groupe by id
      description: Get one demande of one groupe by id
      parameters:
        - name: id_groupe
          in: path
          description: Id of the groupe to get
          type: integer
          required: True
        - name: id_demande
          in: path
          description: Id of the demande to get
          type: integer
          required: True
      responses:
        200:
          description: Successful read demande from groupe operation
          schema:
            $ref: '#/definitions/Demande'

#------------------------------------------------------------------------------------------

definitions:
  Sortie:
    type: "object"
    properties:
      nom:
        type: "string"
      lieu:
        type: "string"
      date:
        type: "string"
      heure:
        type: "string"
      duree:
        type: "string"
      point_rdv:
        type: "string"
      capaciteMin:
        type: "integer"
      capaciteMax:
        type: "integer"
      privee:
        type: "boolean"
      id_groupe:
        type: "integer"
      typeSortie:
        type: "string"
      photo:
        type: "string"
      nbInscrits:
        type: "integer"
      description:
        type: "string"
      dateLimite:
        type: "string"
      archivee:
        type: "boolean"

  User:
    type: "object"
    properties:
      password_hash:
        type: "string"
      prenom:
        type: "string"
      nom:
        type: "string"
      email:
        type: "string"
      photo:
        type: "string"
      dateNaissance:
        type: "string"
      ville:
        type: "string"
      preferences:
        type: "string"
      sexe:
        type: "string"
      bio:
        type: "string"
      role:
        type: "string"
      feedbacks:
        type: "string"


  Commentaire:
    type: "object"
    properties:
      contenu:
        type: "string"
      timestamp:
        type: "string"

  
  Groupe:
    type: "object"
    properties:
      nom:
        type: "string"
      description:
        type: "string"
      nbMembres:
        type: "integer"
      photo:
        type: "string"

  Demande:
    type: "object"
    properties:
      id_groupe:
        type: "integer"
      id_user:
        type: "integer"
      id_owner:
        type: "integer"
      timestamp:
        type: "string"